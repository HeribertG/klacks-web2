// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using klacks_web_api.Data;

namespace klacks_web_api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "2ef4a82d-f22f-4da7-9d8f-240ad0082c75",
                            ConcurrencyStamp = "a5d1b38d-717d-48ea-a58b-74338149dfda",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b7f104de-fdeb-4ce1-ac7d-55009efe521e",
                            ConcurrencyStamp = "0e288b23-3750-4519-bfbb-8e2f60af84ea",
                            Name = "Authorised",
                            NormalizedName = "AUTHORISED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "cb004a8b-766b-4055-b6d9-6bf97627504e",
                            RoleId = "2ef4a82d-f22f-4da7-9d8f-240ad0082c75"
                        },
                        new
                        {
                            UserId = "cb004a8b-766b-4055-b6d9-6bf97627504e",
                            RoleId = "b7f104de-fdeb-4ce1-ac7d-55009efe521e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("klacks_web_api.Models.Corporation.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("pk_staff");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("ix_staff_employee_id");

                    b.HasIndex("ValidFrom", "ValidUntil", "IsDeleted")
                        .HasDatabaseName("ix_staff_valid_from_valid_until_is_deleted");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("text")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("text")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<string>("Street3")
                        .HasColumnType("text")
                        .HasColumnName("street3");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<DateTime?>("ValidFrom")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_address_employee_id");

                    b.HasIndex("Street", "Street2", "Street3", "City", "IsDeleted")
                        .HasDatabaseName("ix_address_street_street2_street3_city_is_deleted");

                    b.ToTable("address");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Annotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_annotation");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_annotation_employee_id");

                    b.ToTable("annotation");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Communication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_communication");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_communication_employee_id");

                    b.HasIndex("Value", "IsDeleted")
                        .HasDatabaseName("ix_communication_value_is_deleted");

                    b.ToTable("communication");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("CurrentUserCreated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_created");

                    b.Property<string>("CurrentUserDeleted")
                        .HasColumnType("text")
                        .HasColumnName("current_user_deleted");

                    b.Property<string>("CurrentUserUpdated")
                        .HasColumnType("text")
                        .HasColumnName("current_user_updated");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("maiden_name");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("second_name");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("pk_employee");

                    b.HasIndex("FirstName", "SecondName", "Name", "MaidenName", "Gender", "IsDeleted")
                        .HasDatabaseName("ix_employee_first_name_second_name_name_maiden_name_gender_is_");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("klacks_web_api.Models.Options.CommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<int>("DefaultIndex")
                        .HasColumnType("integer")
                        .HasColumnName("default_index");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_communication_type");

                    b.ToTable("communication_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            DefaultIndex = 0,
                            Name = "Festnetz P",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = 0,
                            DefaultIndex = 1,
                            Name = "Mobil P",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            DefaultIndex = 0,
                            Name = "Festnetz G",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Category = 0,
                            DefaultIndex = 0,
                            Name = "Mobil G",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            Category = 0,
                            DefaultIndex = 0,
                            Name = "NotfallNo",
                            Type = 7
                        },
                        new
                        {
                            Id = 6,
                            Category = 1,
                            DefaultIndex = 2,
                            Name = "Email P",
                            Type = 4
                        },
                        new
                        {
                            Id = 7,
                            Category = 1,
                            DefaultIndex = 0,
                            Name = "Email G",
                            Type = 5
                        },
                        new
                        {
                            Id = 8,
                            Category = 0,
                            DefaultIndex = 0,
                            Name = "Anderes",
                            Type = 6
                        });
                });

            modelBuilder.Entity("klacks_web_api.Models.Options.Countries", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Prefix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("prefix");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("478fc46a-85c4-41f3-8985-6d8f528dd17d"),
                            Abbreviation = "CH",
                            Name = "Schweiz",
                            Prefix = "+41"
                        },
                        new
                        {
                            Id = new Guid("e963789a-31ce-4c21-bfb4-698a2845046c"),
                            Abbreviation = "D",
                            Name = "Deutschland",
                            Prefix = "+49"
                        },
                        new
                        {
                            Id = new Guid("dc26799a-b160-4f60-abc8-5ec04c6f0971"),
                            Abbreviation = "D",
                            Name = "Frankreich",
                            Prefix = "+33"
                        },
                        new
                        {
                            Id = new Guid("1fbde674-b24e-485b-abca-7ab09fae0d3f"),
                            Abbreviation = "I",
                            Name = "Italien",
                            Prefix = "+39"
                        },
                        new
                        {
                            Id = new Guid("28dc4260-5556-4c4a-ad0b-d818f2a9d39c"),
                            Abbreviation = "A",
                            Name = "Österreich",
                            Prefix = "+43"
                        },
                        new
                        {
                            Id = new Guid("b5b60df5-b8f8-4132-8b4c-6c1290942b83"),
                            Abbreviation = "LI",
                            Name = "Fürstentum Liechtenstein",
                            Prefix = "+423"
                        });
                });

            modelBuilder.Entity("klacks_web_api.Models.Options.PostcodeCH", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("state");

                    b.Property<int>("Zip")
                        .HasColumnType("integer")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_postcode_ch");

                    b.ToTable("postcode_ch");
                });

            modelBuilder.Entity("klacks_web_api.Models.Authentfication.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "cb004a8b-766b-4055-b6d9-6bf97627504e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73c2962e-30f5-4f6b-be40-9975302af983",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENxd/0HZdbXjDMrC9wvnGv4pkJaOxOkp9MrVWXW8GrAUzYTD+LYl3iaxkSRKbZYNLA==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6fda444-42a5-4077-a515-54d075beb9c2",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            FirstName = "admin",
                            LastName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("klacks_web_api.Models.Corporation.Staff", b =>
                {
                    b.HasOne("klacks_web_api.Models.Employee.Employee", "Employee")
                        .WithOne("Staff")
                        .HasForeignKey("klacks_web_api.Models.Corporation.Staff", "EmployeeId")
                        .HasConstraintName("fk_staff_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Address", b =>
                {
                    b.HasOne("klacks_web_api.Models.Employee.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_address_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Annotation", b =>
                {
                    b.HasOne("klacks_web_api.Models.Employee.Employee", "Employee")
                        .WithMany("Annotations")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_annotation_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Communication", b =>
                {
                    b.HasOne("klacks_web_api.Models.Employee.Employee", "Employee")
                        .WithMany("Communications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_communication_employee_employee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("klacks_web_api.Models.Employee.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Annotations");

                    b.Navigation("Communications");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
